[
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "SplitView:bindHotkeys(mapping)",
        "def_gfm": "SplitView:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for SplitView",
        "doc": "Binds hotkeys for SplitView\n\nParameters:\n * mapping - A table containing hotkey details for the following items:\n  * choose - Interactively choose another window to enter split-view with\n  * switchFocus - Switch the split view window focus\n  * removeDesktop - Remove the current fullscreen desktop\n  * chooseApp* - Create one or more special `choose` bindings to choose among only those windows matching a given application string.  In this case, give the app string to match as the last table entry.  E.g. `chooseAppEmacs={{\"cmd\",\"ctrl\"},\"e\",\"Emacs\"}`\n  * chooseWin* - Create one or more special `choose` bindings to choose among only those windows matching a given title string.  Give the title string as the last table entry.  E.g. `{chooseWinProj={{\"cmd\",\"ctrl\"},\"p\",\"MyProject\"}}`\n  * chooseAppWin* - Create one or more special `choose` bindings to choose among only those applications matching a given string, and windows of that applicaiton matching a given title string.  Give the application string, then title string as the last two table entries. E.g. `{chooseAppWinEmacsProj={{\"cmd\",\"ctrl\"},\"1\",\"Emacs\",\"MyProject\"}}",
        "doc_gfm": "<p>Binds hotkeys for SplitView</p>\n<p>Parameters:</p>\n<ul>\n<li>mapping - A table containing hotkey details for the following items:</li>\n<li>choose - Interactively choose another window to enter split-view with</li>\n<li>switchFocus - Switch the split view window focus</li>\n<li>removeDesktop - Remove the current fullscreen desktop</li>\n<li>chooseApp* - Create one or more special <code>choose</code> bindings to choose among only those windows matching a given application string.  In this case, give the app string to match as the last table entry.  E.g. <code>chooseAppEmacs={{&quot;cmd&quot;,&quot;ctrl&quot;},&quot;e&quot;,&quot;Emacs&quot;}</code></li>\n<li>chooseWin* - Create one or more special <code>choose</code> bindings to choose among only those windows matching a given title string.  Give the title string as the last table entry.  E.g. <code>{chooseWinProj={{&quot;cmd&quot;,&quot;ctrl&quot;},&quot;p&quot;,&quot;MyProject&quot;}}</code></li>\n<li>chooseAppWin* - Create one or more special <code>choose</code> bindings to choose among only those applications matching a given string, and windows of that applicaiton matching a given title string.  Give the application string, then title string as the last two table entries. E.g. `{chooseAppWinEmacsProj={{&quot;cmd&quot;,&quot;ctrl&quot;},&quot;1&quot;,&quot;Emacs&quot;,&quot;MyProject&quot;}}</li>\n</ul>\n",
        "examples": [],
        "file": "./init.lua",
        "lineno": "663",
        "name": "bindHotkeys",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * mapping - A table containing hotkey details for the following items:\n   * choose - Interactively choose another window to enter split-view with\n   * switchFocus - Switch the split view window focus\n   * removeDesktop - Remove the current fullscreen desktop\n   * chooseApp* - Create one or more special `choose` bindings to choose among only those windows matching a given application string.  In this case, give the app string to match as the last table entry.  E.g. `chooseAppEmacs={{\"cmd\",\"ctrl\"},\"e\",\"Emacs\"}`\n   * chooseWin* - Create one or more special `choose` bindings to choose among only those windows matching a given title string.  Give the title string as the last table entry.  E.g. `{chooseWinProj={{\"cmd\",\"ctrl\"},\"p\",\"MyProject\"}}`\n   * chooseAppWin* - Create one or more special `choose` bindings to choose among only those applications matching a given string, and windows of that applicaiton matching a given title string.  Give the application string, then title string as the last two table entries. E.g. `{chooseAppWinEmacsProj={{\"cmd\",\"ctrl\"},\"1\",\"Emacs\",\"MyProject\"}}"
        ],
        "parameters_gfm": "<ul>\n<li>mapping - A table containing hotkey details for the following items:<ul>\n<li>choose - Interactively choose another window to enter split-view with</li>\n<li>switchFocus - Switch the split view window focus</li>\n<li>removeDesktop - Remove the current fullscreen desktop</li>\n<li>chooseApp* - Create one or more special <code>choose</code> bindings to choose among only those windows matching a given application string.  In this case, give the app string to match as the last table entry.  E.g. <code>chooseAppEmacs={{&quot;cmd&quot;,&quot;ctrl&quot;},&quot;e&quot;,&quot;Emacs&quot;}</code></li>\n<li>chooseWin* - Create one or more special <code>choose</code> bindings to choose among only those windows matching a given title string.  Give the title string as the last table entry.  E.g. <code>{chooseWinProj={{&quot;cmd&quot;,&quot;ctrl&quot;},&quot;p&quot;,&quot;MyProject&quot;}}</code></li>\n<li>chooseAppWin* - Create one or more special <code>choose</code> bindings to choose among only those applications matching a given string, and windows of that applicaiton matching a given title string.  Give the application string, then title string as the last two table entries. E.g. `{chooseAppWinEmacsProj={{&quot;cmd&quot;,&quot;ctrl&quot;},&quot;1&quot;,&quot;Emacs&quot;,&quot;MyProject&quot;}}</li>\n</ul>\n</li>\n</ul>\n",
        "returns": [],
        "returns_gfm": "",
        "signature": "SplitView:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SplitView:byName([otherapp,otherwin,noChoose])",
        "def_gfm": "SplitView:byName([otherapp,otherwin,noChoose])",
        "desc": "Select an application and window _by name_ to enter split-view",
        "doc": "Select an application and window _by name_ to enter split-view\nalong side the currently focused window\nUseful for creating custom key bindings for specific applications\nand/or matching window title strings (see\n`SplitView:bindHotkeys`).  Also useful for calling from the\ncommand line (c.f. `hs.ipc.cliInstall`).  E.g., assuming\n`spoon.splitView` was assigned in your top level as in the example\nconfig above:\n  `hs -c \"spoon.splitView.byName(\"Terminal\",\"server1\")`\nwould enter split view with the current window and a Terminal\nwindow with \"server1\" in the title.\n\nParameters:\n * `otherapp`: (Optional, String) The (partial) name of the other\n window's application, or omitted/`nil` for no application\n filtering\n * `otherwin`: (Optional, String) The (partial) title of the other\n window, or omitted/`nil` for no window name filtering\n * `noChoose`: (Optional, Boolean) By default a chooser window is\n invoked if more than one window matches. To disable this behavior\n and always take the first match (if any), pass `true` for this\n parameter.\n\nReturns:\n * None",
        "doc_gfm": "<p>Select an application and window <em>by name</em> to enter split-view\nalong side the currently focused window\nUseful for creating custom key bindings for specific applications\nand/or matching window title strings (see\n<code>SplitView:bindHotkeys</code>).  Also useful for calling from the\ncommand line (c.f. <code>hs.ipc.cliInstall</code>).  E.g., assuming\n<code>spoon.splitView</code> was assigned in your top level as in the example\nconfig above:\n  <code>hs -c &quot;spoon.splitView.byName(&quot;Terminal&quot;,&quot;server1&quot;)</code>\nwould enter split view with the current window and a Terminal\nwindow with &quot;server1&quot; in the title.</p>\n<p>Parameters:</p>\n<ul>\n<li><code>otherapp</code>: (Optional, String) The (partial) name of the other</li>\n</ul>\n<p>window's application, or omitted/<code>nil</code> for no application\n filtering</p>\n<ul>\n<li><code>otherwin</code>: (Optional, String) The (partial) title of the other</li>\n</ul>\n<p>window, or omitted/<code>nil</code> for no window name filtering</p>\n<ul>\n<li><code>noChoose</code>: (Optional, Boolean) By default a chooser window is</li>\n</ul>\n<p>invoked if more than one window matches. To disable this behavior\n and always take the first match (if any), pass <code>true</code> for this\n parameter.</p>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n",
        "examples": [],
        "file": "./init.lua",
        "lineno": "174",
        "name": "byName",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * `otherapp`: (Optional, String) The (partial) name of the other window's application, or omitted/`nil` for no application filtering",
          " * `otherwin`: (Optional, String) The (partial) title of the other window, or omitted/`nil` for no window name filtering",
          " * `noChoose`: (Optional, Boolean) By default a chooser window is invoked if more than one window matches. To disable this behavior and always take the first match (if any), pass `true` for this parameter."
        ],
        "parameters_gfm": "<ul>\n<li><code>otherapp</code>: (Optional, String) The (partial) name of the other window's application, or omitted/<code>nil</code> for no application filtering</li>\n<li><code>otherwin</code>: (Optional, String) The (partial) title of the other window, or omitted/<code>nil</code> for no window name filtering</li>\n<li><code>noChoose</code>: (Optional, Boolean) By default a chooser window is invoked if more than one window matches. To disable this behavior and always take the first match (if any), pass <code>true</code> for this parameter.</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "SplitView:byName([otherapp,otherwin,noChoose])",
        "stripped_doc": "along side the currently focused window\nUseful for creating custom key bindings for specific applications\nand/or matching window title strings (see\n`SplitView:bindHotkeys`).  Also useful for calling from the\ncommand line (c.f. `hs.ipc.cliInstall`).  E.g., assuming\n`spoon.splitView` was assigned in your top level as in the example\nconfig above:\n  `hs -c \"spoon.splitView.byName(\"Terminal\",\"server1\")`\nwould enter split view with the current window and a Terminal\nwindow with \"server1\" in the title.",
        "type": "Method"
      },
      {
        "def": "SplitView:choose()",
        "def_gfm": "SplitView:choose()",
        "desc": "Choose another window to enter split-view with together with the current window",
        "doc": "Choose another window to enter split-view with together with the current window\n\nParameters:\n * `winChoices`: (Optional) A table of hs.windows to choose from (as,\n e.g., provided by `SplitView:byName`).  Defaults to choosing\n among all other windows on the same screen.  Only standard,\n non-fullscreen windows from the list are included.\n\nReturns:\n * None",
        "doc_gfm": "<p>Choose another window to enter split-view with together with the current window</p>\n<p>Parameters:</p>\n<ul>\n<li><code>winChoices</code>: (Optional) A table of hs.windows to choose from (as,</li>\n</ul>\n<p>e.g., provided by <code>SplitView:byName</code>).  Defaults to choosing\n among all other windows on the same screen.  Only standard,\n non-fullscreen windows from the list are included.</p>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n",
        "examples": [],
        "file": "./init.lua",
        "lineno": "105",
        "name": "choose",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * `winChoices`: (Optional) A table of hs.windows to choose from (as, e.g., provided by `SplitView:byName`).  Defaults to choosing among all other windows on the same screen.  Only standard, non-fullscreen windows from the list are included."
        ],
        "parameters_gfm": "<ul>\n<li><code>winChoices</code>: (Optional) A table of hs.windows to choose from (as, e.g., provided by <code>SplitView:byName</code>).  Defaults to choosing among all other windows on the same screen.  Only standard, non-fullscreen windows from the list are included.</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "SplitView:choose()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SplitView:removeCurrentFullScreenDesktop",
        "def_gfm": "SplitView:removeCurrentFullScreenDesktop",
        "desc": "Use Mission Control to remove the current full-screen or split-view desktop (aka space) and switch back to the first user space.",
        "doc": "Use Mission Control to remove the current full-screen or split-view desktop (aka space) and switch back to the first user space.\n\nParameters:\n * None\n\nReturns:\n * None",
        "doc_gfm": "<p>Use Mission Control to remove the current full-screen or split-view desktop (aka space) and switch back to the first user space.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n",
        "examples": [],
        "file": "./init.lua",
        "lineno": "600",
        "name": "removeCurrentFullScreenDesktop",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "SplitView:removeCurrentFullScreenDesktop",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SplitView:swapWindows",
        "def_gfm": "SplitView:swapWindows",
        "desc": "Swap the two spaces in a full screen split view",
        "doc": "Swap the two spaces in a full screen split view\n\nParameters:\n * None\n\nReturns:\n * None",
        "doc_gfm": "<p>Swap the two spaces in a full screen split view</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n",
        "examples": [],
        "file": "./init.lua",
        "lineno": "539",
        "name": "swapWindows",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "SplitView:swapWindows",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SplitView:switchFocus()",
        "def_gfm": "SplitView:switchFocus()",
        "desc": "Switch focus from one side of a Split View to another, with an animated arrow showing the switch.",
        "doc": "Switch focus from one side of a Split View to another, with an animated arrow showing the switch.\n\nParameters:\n * None\n\nReturns:\n * None",
        "doc_gfm": "<p>Switch focus from one side of a Split View to another, with an animated arrow showing the switch.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n",
        "examples": [],
        "file": "./init.lua",
        "lineno": "435",
        "name": "switchFocus",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "SplitView:switchFocus()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "SplitView:checkInterval",
        "def_gfm": "SplitView:checkInterval",
        "desc": "(Float) Time interval in seconds to check for various MC/SplitView actions to complete",
        "doc": "(Float) Time interval in seconds to check for various MC/SplitView actions to complete",
        "doc_gfm": "<p>(Float) Time interval in seconds to check for various MC/SplitView actions to complete</p>\n",
        "file": "./init.lua",
        "lineno": "82",
        "name": "checkInterval",
        "signature": "SplitView:checkInterval",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SplitView:debug",
        "def_gfm": "SplitView:debug",
        "desc": "(Boolean) Whether to print debug information to the console.  Can",
        "doc": "(Boolean) Whether to print debug information to the console.  Can\nset to the special value \"draw\" to draw grid search positions (can\nbe slow for large grids)",
        "doc_gfm": "<p>(Boolean) Whether to print debug information to the console.  Can\nset to the special value &quot;draw&quot; to draw grid search positions (can\nbe slow for large grids)</p>\n",
        "file": "./init.lua",
        "lineno": "69",
        "name": "debug",
        "signature": "SplitView:debug",
        "stripped_doc": "set to the special value \"draw\" to draw grid search positions (can\nbe slow for large grids)",
        "type": "Variable"
      },
      {
        "def": "SplitView:delayOtherClick",
        "def_gfm": "SplitView:delayOtherClick",
        "desc": "(Float) How long in seconds to delay finding and clicking the other window.",
        "doc": "(Float) How long in seconds to delay finding and clicking the other window.\n Defaults to 0.3s.",
        "doc_gfm": "<p>(Float) How long in seconds to delay finding and clicking the other window.\n Defaults to 0.3s.</p>\n",
        "file": "./init.lua",
        "lineno": "76",
        "name": "delayOtherClick",
        "signature": "SplitView:delayOtherClick",
        "stripped_doc": " Defaults to 0.3s.",
        "type": "Variable"
      },
      {
        "def": "SplitView:maxRefineIter",
        "def_gfm": "SplitView:maxRefineIter",
        "desc": "(String) Maximum number of mini-screen probe point \"jiggle\" refinement iterations",
        "doc": "(String) Maximum number of mini-screen probe point \"jiggle\" refinement iterations",
        "doc_gfm": "<p>(String) Maximum number of mini-screen probe point &quot;jiggle&quot; refinement iterations</p>\n",
        "file": "./init.lua",
        "lineno": "92",
        "name": "maxRefineIter",
        "signature": "SplitView:maxRefineIter",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SplitView:showImage",
        "def_gfm": "SplitView:showImage",
        "desc": "(Boolean) Whether to show a thumbnail image of the window in the choice selection list.  On by default (which slightly slows the interface).",
        "doc": "(Boolean) Whether to show a thumbnail image of the window in the choice selection list.  On by default (which slightly slows the interface).",
        "doc_gfm": "<p>(Boolean) Whether to show a thumbnail image of the window in the choice selection list.  On by default (which slightly slows the interface).</p>\n",
        "file": "./init.lua",
        "lineno": "64",
        "name": "showImage",
        "signature": "SplitView:showImage",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SplitView:tileSide",
        "def_gfm": "SplitView:tileSide",
        "desc": "(String) Which side to tile the window on (\"left\" or \"right\"). ",
        "doc": "(String) Which side to tile the window on (\"left\" or \"right\"). ",
        "doc_gfm": "<p>(String) Which side to tile the window on (&quot;left&quot; or &quot;right&quot;).</p>\n",
        "file": "./init.lua",
        "lineno": "87",
        "name": "tileSide",
        "signature": "SplitView:tileSide",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "*Open two windows side by side in Full Screen SplitView.*  Select by name and/or using a searchable popup display.  Also provides focus toggling between splitview \"halves\" and ability to close a fullscreen or split desktop by keyboard. Requires MacOS>=10.15",
    "desc_gfm": "<p><em>Open two windows side by side in Full Screen SplitView.</em>  Select by name and/or using a searchable popup display.  Also provides focus toggling between splitview &quot;halves&quot; and ability to close a fullscreen or split desktop by keyboard. Requires MacOS&gt;=10.15</p>\n",
    "doc": "*Open two windows side by side in Full Screen SplitView.*  Select by name and/or using a searchable popup display.  Also provides focus toggling between splitview \"halves\" and ability to close a fullscreen or split desktop by keyboard. Requires MacOS>=10.15\nImportant points:\n* `SplitView` relies on the undocumented `spaces` API, and the separate accessibility ui `axuielement`; which _must_ both be installed for it to work; see https://github.com/asmagill/hs._asm.undocumented.spaces and https://github.com/asmagill/hs._asm.axuielement/, \n* This tool works by _simulating_ the split-view user interface: a long green-button click followed by a 2nd window click.  This requires some time delays to work reliably.  If it is unreliable for you, trying increasing these (see `delay*` variables in the reference below).\n* `SplitView` uses `hw.window.filter` to try to ignore atypical windows (menu panes, etc.), which see.  Unrecognized non-standard windows may interfere with `SplitView`'s operation.\n\n*Download*: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/SplitView.spoon.zip]\nExample config in your `~/.hammerspoon/init.lua`:\n```\nmash =      {\"ctrl\", \"cmd\"}\nmashshift = {\"ctrl\", \"cmd\",\"shift\"}\n-- SplitView for Split Screen \nhs.spoons.use(\"SplitView\",\n\t      {config = {tileSide=\"right\"},\n\t       hotkeys={choose={mash,\"e\"},\n\t       \t\t\tchooseAppEmacs={mashshift,\"e\",\"Emacs\"},\n\t       \t\t\tchooseAppWin130={mashshift,\"o\",\"Terminal\",\"130\"},\n\t       \t\t\tremoveDesktop={mashshift,\"k\"},\n\t       \t\t\tswapWindows={mashshift,\"x\"},\n\t       \t\t\tswitchFocus={mash,\"x\"}}})\n```\nVersion 1.7.0",
    "doc_gfm": "<p><em>Open two windows side by side in Full Screen SplitView.</em>  Select by name and/or using a searchable popup display.  Also provides focus toggling between splitview &quot;halves&quot; and ability to close a fullscreen or split desktop by keyboard. Requires MacOS&gt;=10.15\nImportant points:</p>\n<ul>\n<li><code>SplitView</code> relies on the undocumented <code>spaces</code> API, and the separate accessibility ui <code>axuielement</code>; which <em>must</em> both be installed for it to work; see https://github.com/asmagill/hs._asm.undocumented.spaces and https://github.com/asmagill/hs._asm.axuielement/,</li>\n<li>This tool works by <em>simulating</em> the split-view user interface: a long green-button click followed by a 2nd window click.  This requires some time delays to work reliably.  If it is unreliable for you, trying increasing these (see <code>delay*</code> variables in the reference below).</li>\n<li><code>SplitView</code> uses <code>hw.window.filter</code> to try to ignore atypical windows (menu panes, etc.), which see.  Unrecognized non-standard windows may interfere with <code>SplitView</code>'s operation.</li>\n</ul>\n<p><em>Download</em>: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/SplitView.spoon.zip]\nExample config in your <code>~/.hammerspoon/init.lua</code>:</p>\n\n<pre><code>mash =      {&quot;ctrl&quot;, &quot;cmd&quot;}\nmashshift = {&quot;ctrl&quot;, &quot;cmd&quot;,&quot;shift&quot;}\n-- SplitView for Split Screen \nhs.spoons.use(&quot;SplitView&quot;,\n          {config = {tileSide=&quot;right&quot;},\n           hotkeys={choose={mash,&quot;e&quot;},\n           \t\t\tchooseAppEmacs={mashshift,&quot;e&quot;,&quot;Emacs&quot;},\n           \t\t\tchooseAppWin130={mashshift,&quot;o&quot;,&quot;Terminal&quot;,&quot;130&quot;},\n           \t\t\tremoveDesktop={mashshift,&quot;k&quot;},\n           \t\t\tswapWindows={mashshift,&quot;x&quot;},\n           \t\t\tswitchFocus={mash,&quot;x&quot;}}})\n</code></pre>\n<p>Version 1.7.0</p>\n",
    "items": [
      {
        "def": "SplitView:bindHotkeys(mapping)",
        "def_gfm": "SplitView:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for SplitView",
        "doc": "Binds hotkeys for SplitView\n\nParameters:\n * mapping - A table containing hotkey details for the following items:\n  * choose - Interactively choose another window to enter split-view with\n  * switchFocus - Switch the split view window focus\n  * removeDesktop - Remove the current fullscreen desktop\n  * chooseApp* - Create one or more special `choose` bindings to choose among only those windows matching a given application string.  In this case, give the app string to match as the last table entry.  E.g. `chooseAppEmacs={{\"cmd\",\"ctrl\"},\"e\",\"Emacs\"}`\n  * chooseWin* - Create one or more special `choose` bindings to choose among only those windows matching a given title string.  Give the title string as the last table entry.  E.g. `{chooseWinProj={{\"cmd\",\"ctrl\"},\"p\",\"MyProject\"}}`\n  * chooseAppWin* - Create one or more special `choose` bindings to choose among only those applications matching a given string, and windows of that applicaiton matching a given title string.  Give the application string, then title string as the last two table entries. E.g. `{chooseAppWinEmacsProj={{\"cmd\",\"ctrl\"},\"1\",\"Emacs\",\"MyProject\"}}",
        "doc_gfm": "<p>Binds hotkeys for SplitView</p>\n<p>Parameters:</p>\n<ul>\n<li>mapping - A table containing hotkey details for the following items:</li>\n<li>choose - Interactively choose another window to enter split-view with</li>\n<li>switchFocus - Switch the split view window focus</li>\n<li>removeDesktop - Remove the current fullscreen desktop</li>\n<li>chooseApp* - Create one or more special <code>choose</code> bindings to choose among only those windows matching a given application string.  In this case, give the app string to match as the last table entry.  E.g. <code>chooseAppEmacs={{&quot;cmd&quot;,&quot;ctrl&quot;},&quot;e&quot;,&quot;Emacs&quot;}</code></li>\n<li>chooseWin* - Create one or more special <code>choose</code> bindings to choose among only those windows matching a given title string.  Give the title string as the last table entry.  E.g. <code>{chooseWinProj={{&quot;cmd&quot;,&quot;ctrl&quot;},&quot;p&quot;,&quot;MyProject&quot;}}</code></li>\n<li>chooseAppWin* - Create one or more special <code>choose</code> bindings to choose among only those applications matching a given string, and windows of that applicaiton matching a given title string.  Give the application string, then title string as the last two table entries. E.g. `{chooseAppWinEmacsProj={{&quot;cmd&quot;,&quot;ctrl&quot;},&quot;1&quot;,&quot;Emacs&quot;,&quot;MyProject&quot;}}</li>\n</ul>\n",
        "examples": [],
        "file": "./init.lua",
        "lineno": "663",
        "name": "bindHotkeys",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * mapping - A table containing hotkey details for the following items:\n   * choose - Interactively choose another window to enter split-view with\n   * switchFocus - Switch the split view window focus\n   * removeDesktop - Remove the current fullscreen desktop\n   * chooseApp* - Create one or more special `choose` bindings to choose among only those windows matching a given application string.  In this case, give the app string to match as the last table entry.  E.g. `chooseAppEmacs={{\"cmd\",\"ctrl\"},\"e\",\"Emacs\"}`\n   * chooseWin* - Create one or more special `choose` bindings to choose among only those windows matching a given title string.  Give the title string as the last table entry.  E.g. `{chooseWinProj={{\"cmd\",\"ctrl\"},\"p\",\"MyProject\"}}`\n   * chooseAppWin* - Create one or more special `choose` bindings to choose among only those applications matching a given string, and windows of that applicaiton matching a given title string.  Give the application string, then title string as the last two table entries. E.g. `{chooseAppWinEmacsProj={{\"cmd\",\"ctrl\"},\"1\",\"Emacs\",\"MyProject\"}}"
        ],
        "parameters_gfm": "<ul>\n<li>mapping - A table containing hotkey details for the following items:<ul>\n<li>choose - Interactively choose another window to enter split-view with</li>\n<li>switchFocus - Switch the split view window focus</li>\n<li>removeDesktop - Remove the current fullscreen desktop</li>\n<li>chooseApp* - Create one or more special <code>choose</code> bindings to choose among only those windows matching a given application string.  In this case, give the app string to match as the last table entry.  E.g. <code>chooseAppEmacs={{&quot;cmd&quot;,&quot;ctrl&quot;},&quot;e&quot;,&quot;Emacs&quot;}</code></li>\n<li>chooseWin* - Create one or more special <code>choose</code> bindings to choose among only those windows matching a given title string.  Give the title string as the last table entry.  E.g. <code>{chooseWinProj={{&quot;cmd&quot;,&quot;ctrl&quot;},&quot;p&quot;,&quot;MyProject&quot;}}</code></li>\n<li>chooseAppWin* - Create one or more special <code>choose</code> bindings to choose among only those applications matching a given string, and windows of that applicaiton matching a given title string.  Give the application string, then title string as the last two table entries. E.g. `{chooseAppWinEmacsProj={{&quot;cmd&quot;,&quot;ctrl&quot;},&quot;1&quot;,&quot;Emacs&quot;,&quot;MyProject&quot;}}</li>\n</ul>\n</li>\n</ul>\n",
        "returns": [],
        "returns_gfm": "",
        "signature": "SplitView:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SplitView:byName([otherapp,otherwin,noChoose])",
        "def_gfm": "SplitView:byName([otherapp,otherwin,noChoose])",
        "desc": "Select an application and window _by name_ to enter split-view",
        "doc": "Select an application and window _by name_ to enter split-view\nalong side the currently focused window\nUseful for creating custom key bindings for specific applications\nand/or matching window title strings (see\n`SplitView:bindHotkeys`).  Also useful for calling from the\ncommand line (c.f. `hs.ipc.cliInstall`).  E.g., assuming\n`spoon.splitView` was assigned in your top level as in the example\nconfig above:\n  `hs -c \"spoon.splitView.byName(\"Terminal\",\"server1\")`\nwould enter split view with the current window and a Terminal\nwindow with \"server1\" in the title.\n\nParameters:\n * `otherapp`: (Optional, String) The (partial) name of the other\n window's application, or omitted/`nil` for no application\n filtering\n * `otherwin`: (Optional, String) The (partial) title of the other\n window, or omitted/`nil` for no window name filtering\n * `noChoose`: (Optional, Boolean) By default a chooser window is\n invoked if more than one window matches. To disable this behavior\n and always take the first match (if any), pass `true` for this\n parameter.\n\nReturns:\n * None",
        "doc_gfm": "<p>Select an application and window <em>by name</em> to enter split-view\nalong side the currently focused window\nUseful for creating custom key bindings for specific applications\nand/or matching window title strings (see\n<code>SplitView:bindHotkeys</code>).  Also useful for calling from the\ncommand line (c.f. <code>hs.ipc.cliInstall</code>).  E.g., assuming\n<code>spoon.splitView</code> was assigned in your top level as in the example\nconfig above:\n  <code>hs -c &quot;spoon.splitView.byName(&quot;Terminal&quot;,&quot;server1&quot;)</code>\nwould enter split view with the current window and a Terminal\nwindow with &quot;server1&quot; in the title.</p>\n<p>Parameters:</p>\n<ul>\n<li><code>otherapp</code>: (Optional, String) The (partial) name of the other</li>\n</ul>\n<p>window's application, or omitted/<code>nil</code> for no application\n filtering</p>\n<ul>\n<li><code>otherwin</code>: (Optional, String) The (partial) title of the other</li>\n</ul>\n<p>window, or omitted/<code>nil</code> for no window name filtering</p>\n<ul>\n<li><code>noChoose</code>: (Optional, Boolean) By default a chooser window is</li>\n</ul>\n<p>invoked if more than one window matches. To disable this behavior\n and always take the first match (if any), pass <code>true</code> for this\n parameter.</p>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n",
        "examples": [],
        "file": "./init.lua",
        "lineno": "174",
        "name": "byName",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * `otherapp`: (Optional, String) The (partial) name of the other window's application, or omitted/`nil` for no application filtering",
          " * `otherwin`: (Optional, String) The (partial) title of the other window, or omitted/`nil` for no window name filtering",
          " * `noChoose`: (Optional, Boolean) By default a chooser window is invoked if more than one window matches. To disable this behavior and always take the first match (if any), pass `true` for this parameter."
        ],
        "parameters_gfm": "<ul>\n<li><code>otherapp</code>: (Optional, String) The (partial) name of the other window's application, or omitted/<code>nil</code> for no application filtering</li>\n<li><code>otherwin</code>: (Optional, String) The (partial) title of the other window, or omitted/<code>nil</code> for no window name filtering</li>\n<li><code>noChoose</code>: (Optional, Boolean) By default a chooser window is invoked if more than one window matches. To disable this behavior and always take the first match (if any), pass <code>true</code> for this parameter.</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "SplitView:byName([otherapp,otherwin,noChoose])",
        "stripped_doc": "along side the currently focused window\nUseful for creating custom key bindings for specific applications\nand/or matching window title strings (see\n`SplitView:bindHotkeys`).  Also useful for calling from the\ncommand line (c.f. `hs.ipc.cliInstall`).  E.g., assuming\n`spoon.splitView` was assigned in your top level as in the example\nconfig above:\n  `hs -c \"spoon.splitView.byName(\"Terminal\",\"server1\")`\nwould enter split view with the current window and a Terminal\nwindow with \"server1\" in the title.",
        "type": "Method"
      },
      {
        "def": "SplitView:checkInterval",
        "def_gfm": "SplitView:checkInterval",
        "desc": "(Float) Time interval in seconds to check for various MC/SplitView actions to complete",
        "doc": "(Float) Time interval in seconds to check for various MC/SplitView actions to complete",
        "doc_gfm": "<p>(Float) Time interval in seconds to check for various MC/SplitView actions to complete</p>\n",
        "file": "./init.lua",
        "lineno": "82",
        "name": "checkInterval",
        "signature": "SplitView:checkInterval",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SplitView:choose()",
        "def_gfm": "SplitView:choose()",
        "desc": "Choose another window to enter split-view with together with the current window",
        "doc": "Choose another window to enter split-view with together with the current window\n\nParameters:\n * `winChoices`: (Optional) A table of hs.windows to choose from (as,\n e.g., provided by `SplitView:byName`).  Defaults to choosing\n among all other windows on the same screen.  Only standard,\n non-fullscreen windows from the list are included.\n\nReturns:\n * None",
        "doc_gfm": "<p>Choose another window to enter split-view with together with the current window</p>\n<p>Parameters:</p>\n<ul>\n<li><code>winChoices</code>: (Optional) A table of hs.windows to choose from (as,</li>\n</ul>\n<p>e.g., provided by <code>SplitView:byName</code>).  Defaults to choosing\n among all other windows on the same screen.  Only standard,\n non-fullscreen windows from the list are included.</p>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n",
        "examples": [],
        "file": "./init.lua",
        "lineno": "105",
        "name": "choose",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * `winChoices`: (Optional) A table of hs.windows to choose from (as, e.g., provided by `SplitView:byName`).  Defaults to choosing among all other windows on the same screen.  Only standard, non-fullscreen windows from the list are included."
        ],
        "parameters_gfm": "<ul>\n<li><code>winChoices</code>: (Optional) A table of hs.windows to choose from (as, e.g., provided by <code>SplitView:byName</code>).  Defaults to choosing among all other windows on the same screen.  Only standard, non-fullscreen windows from the list are included.</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "SplitView:choose()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SplitView:debug",
        "def_gfm": "SplitView:debug",
        "desc": "(Boolean) Whether to print debug information to the console.  Can",
        "doc": "(Boolean) Whether to print debug information to the console.  Can\nset to the special value \"draw\" to draw grid search positions (can\nbe slow for large grids)",
        "doc_gfm": "<p>(Boolean) Whether to print debug information to the console.  Can\nset to the special value &quot;draw&quot; to draw grid search positions (can\nbe slow for large grids)</p>\n",
        "file": "./init.lua",
        "lineno": "69",
        "name": "debug",
        "signature": "SplitView:debug",
        "stripped_doc": "set to the special value \"draw\" to draw grid search positions (can\nbe slow for large grids)",
        "type": "Variable"
      },
      {
        "def": "SplitView:delayOtherClick",
        "def_gfm": "SplitView:delayOtherClick",
        "desc": "(Float) How long in seconds to delay finding and clicking the other window.",
        "doc": "(Float) How long in seconds to delay finding and clicking the other window.\n Defaults to 0.3s.",
        "doc_gfm": "<p>(Float) How long in seconds to delay finding and clicking the other window.\n Defaults to 0.3s.</p>\n",
        "file": "./init.lua",
        "lineno": "76",
        "name": "delayOtherClick",
        "signature": "SplitView:delayOtherClick",
        "stripped_doc": " Defaults to 0.3s.",
        "type": "Variable"
      },
      {
        "def": "SplitView:maxRefineIter",
        "def_gfm": "SplitView:maxRefineIter",
        "desc": "(String) Maximum number of mini-screen probe point \"jiggle\" refinement iterations",
        "doc": "(String) Maximum number of mini-screen probe point \"jiggle\" refinement iterations",
        "doc_gfm": "<p>(String) Maximum number of mini-screen probe point &quot;jiggle&quot; refinement iterations</p>\n",
        "file": "./init.lua",
        "lineno": "92",
        "name": "maxRefineIter",
        "signature": "SplitView:maxRefineIter",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SplitView:removeCurrentFullScreenDesktop",
        "def_gfm": "SplitView:removeCurrentFullScreenDesktop",
        "desc": "Use Mission Control to remove the current full-screen or split-view desktop (aka space) and switch back to the first user space.",
        "doc": "Use Mission Control to remove the current full-screen or split-view desktop (aka space) and switch back to the first user space.\n\nParameters:\n * None\n\nReturns:\n * None",
        "doc_gfm": "<p>Use Mission Control to remove the current full-screen or split-view desktop (aka space) and switch back to the first user space.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n",
        "examples": [],
        "file": "./init.lua",
        "lineno": "600",
        "name": "removeCurrentFullScreenDesktop",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "SplitView:removeCurrentFullScreenDesktop",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SplitView:showImage",
        "def_gfm": "SplitView:showImage",
        "desc": "(Boolean) Whether to show a thumbnail image of the window in the choice selection list.  On by default (which slightly slows the interface).",
        "doc": "(Boolean) Whether to show a thumbnail image of the window in the choice selection list.  On by default (which slightly slows the interface).",
        "doc_gfm": "<p>(Boolean) Whether to show a thumbnail image of the window in the choice selection list.  On by default (which slightly slows the interface).</p>\n",
        "file": "./init.lua",
        "lineno": "64",
        "name": "showImage",
        "signature": "SplitView:showImage",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SplitView:swapWindows",
        "def_gfm": "SplitView:swapWindows",
        "desc": "Swap the two spaces in a full screen split view",
        "doc": "Swap the two spaces in a full screen split view\n\nParameters:\n * None\n\nReturns:\n * None",
        "doc_gfm": "<p>Swap the two spaces in a full screen split view</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n",
        "examples": [],
        "file": "./init.lua",
        "lineno": "539",
        "name": "swapWindows",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "SplitView:swapWindows",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SplitView:switchFocus()",
        "def_gfm": "SplitView:switchFocus()",
        "desc": "Switch focus from one side of a Split View to another, with an animated arrow showing the switch.",
        "doc": "Switch focus from one side of a Split View to another, with an animated arrow showing the switch.\n\nParameters:\n * None\n\nReturns:\n * None",
        "doc_gfm": "<p>Switch focus from one side of a Split View to another, with an animated arrow showing the switch.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n",
        "examples": [],
        "file": "./init.lua",
        "lineno": "435",
        "name": "switchFocus",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "SplitView:switchFocus()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SplitView:tileSide",
        "def_gfm": "SplitView:tileSide",
        "desc": "(String) Which side to tile the window on (\"left\" or \"right\"). ",
        "doc": "(String) Which side to tile the window on (\"left\" or \"right\"). ",
        "doc_gfm": "<p>(String) Which side to tile the window on (&quot;left&quot; or &quot;right&quot;).</p>\n",
        "file": "./init.lua",
        "lineno": "87",
        "name": "tileSide",
        "signature": "SplitView:tileSide",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "name": "SplitView",
    "stripped_doc": "Important points:\n* `SplitView` relies on the undocumented `spaces` API, and the separate accessibility ui `axuielement`; which _must_ both be installed for it to work; see https://github.com/asmagill/hs._asm.undocumented.spaces and https://github.com/asmagill/hs._asm.axuielement/, \n* This tool works by _simulating_ the split-view user interface: a long green-button click followed by a 2nd window click.  This requires some time delays to work reliably.  If it is unreliable for you, trying increasing these (see `delay*` variables in the reference below).\n* `SplitView` uses `hw.window.filter` to try to ignore atypical windows (menu panes, etc.), which see.  Unrecognized non-standard windows may interfere with `SplitView`'s operation.\n\n*Download*: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/SplitView.spoon.zip]\nExample config in your `~/.hammerspoon/init.lua`:\n```\nmash =      {\"ctrl\", \"cmd\"}\nmashshift = {\"ctrl\", \"cmd\",\"shift\"}\n-- SplitView for Split Screen \nhs.spoons.use(\"SplitView\",\n\t      {config = {tileSide=\"right\"},\n\t       hotkeys={choose={mash,\"e\"},\n\t       \t\t\tchooseAppEmacs={mashshift,\"e\",\"Emacs\"},\n\t       \t\t\tchooseAppWin130={mashshift,\"o\",\"Terminal\",\"130\"},\n\t       \t\t\tremoveDesktop={mashshift,\"k\"},\n\t       \t\t\tswapWindows={mashshift,\"x\"},\n\t       \t\t\tswitchFocus={mash,\"x\"}}})\n```\nVersion 1.7.0",
    "submodules": [],
    "type": "Module"
  }
]